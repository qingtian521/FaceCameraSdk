package sdk.facecamera.sdk.sdk;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : config_gw.h:395</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class config_limit_speed extends Structure {
	/** \u6293\u62cd\u5f20\u6570\u4e0e\u6293\u62cd\u95f4\u9694 */
	public short capture_count;
	public short overspeed_count;
	public int interval;
	/**
	 * \u8f66\u9053\u6807\u5b9a\u9650\u901f\u503c<br>
	 * C type : unsigned short[(4)]
	 */
	public short[] lspeed = new short[4];
	/**
	 * \u8d85\u901f\u5904\u7406\u7684\u9650\u901f\u503c<br>
	 * C type : unsigned short[(4)]
	 */
	public short[] rlspeed = new short[4];
	/** C type : char[32] */
	public byte[] resv = new byte[32];
	public config_limit_speed() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("capture_count", "overspeed_count", "interval", "lspeed", "rlspeed", "resv");
	}
	/**
	 * @param capture_count \u6293\u62cd\u5f20\u6570\u4e0e\u6293\u62cd\u95f4\u9694<br>
	 * @param lspeed \u8f66\u9053\u6807\u5b9a\u9650\u901f\u503c<br>
	 * C type : unsigned short[(4)]<br>
	 * @param rlspeed \u8d85\u901f\u5904\u7406\u7684\u9650\u901f\u503c<br>
	 * C type : unsigned short[(4)]<br>
	 * @param resv C type : char[32]
	 */
	public config_limit_speed(short capture_count, short overspeed_count, int interval, short lspeed[], short rlspeed[], byte resv[]) {
		super();
		this.capture_count = capture_count;
		this.overspeed_count = overspeed_count;
		this.interval = interval;
		if ((lspeed.length != this.lspeed.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.lspeed = lspeed;
		if ((rlspeed.length != this.rlspeed.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.rlspeed = rlspeed;
		if ((resv.length != this.resv.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.resv = resv;
	}
	public static class ByReference extends config_limit_speed implements Structure.ByReference {
		
	};
	public static class ByValue extends config_limit_speed implements Structure.ByValue {
		
	};
}
