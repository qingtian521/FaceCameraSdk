package sdk.facecamera.sdk.sdk;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : config_gw.h:274</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class config_vdetect extends Structure {
	/** \u89c6\u9891\u68c0\u6d4b\u4f7f\u80fd */
	public int enable;
	/**
	 * @see vdetect_type<br>
	 * C type : vdetect_type
	 */
	public int type;
	/** \u89c6\u9891\u89e6\u53d1\u95ea\u5149 */
	public int flash;
	/** \u8fd0\u52a8\u68c0\u6d4b */
	public int motion;
	/** \u5dee\u5206\u4f7f\u80fd */
	public int diff;
	/**
	 * \u89c6\u9891\u68c0\u6d4b\u533a\u57df<br>
	 * C type : config_rect
	 */
	public config_rect detect_area;
	/**
	 * \u865a\u62df\u7ebf\u5708\uff0c\u89e6\u53d1\u533a\u57df<br>
	 * C type : config_rect
	 */
	public config_rect virtual_coil;
	/** \u767d\u5929\u665a\u4e0a\u4eae\u5ea6 \u9608\u503c */
	public int night_threshold;
	public int rsv2;
	/** \u8df3\u5e27\u6570\uff0c\u8f66\u8f86\u89e6\u53d1\u4ee5\u540e\u8df3\u8fc7\u591a\u5c11\u5e27\u4e0d\u68c0\u6d4b */
	public int skip;
	/** \u4e0a\u6cbf\u5207\u5272\u50cf\u7d20 */
	public int cut;
	public int min_size;
	public int max_size;
	public int resize;
	public float step;
	/** \u8c03\u8bd5\u5f00\u5173\uff0c\u63a7\u5236\u662f\u5426\u4f20\u8f93\u8c03\u8bd5\u56fe\u50cf */
	public int debug;
	/** \u5c06\u865a\u62df\u7ebf\u5708\u7ed8\u5236\u5728\u8c03\u8bd5\u56fe\u50cf\u4e0a */
	public int draw_coil;
	/** \u5c06\u68c0\u6d4b\u5230\u7684\u8f66\u8f86\u533a\u57df\u7ed8\u5236\u5728\u8c03\u8bd5\u56fe\u50cf\u4e0a */
	public int draw_area;
	/**
	 * @see CALC_LANENO_METHOD<br>
	 * C type : CALC_LANENO_METHOD
	 */
	public int m;
	/**
	 * \u4e0e\u95ea\u5149\u706f\u5339\u914d\uff0cmatch_light\u7684\u4e0b\u6807n\u52a0\u4e0a1\u8868\u793a\u96f7\u8fbe\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\uff09<br>
	 * match_light[n]\u6240\u5bf9\u5e94\u7684\u503c\u8868\u793a\u6240\u5bf9\u5e94\u7684\u95ea\u5149\u706f<br>
	 * 0x1 0x2 0x4 0x8 \u5206\u522b\u8868\u793a 1\u30012\u30013\u30014\u8def\u95ea\u5149\u706f 0x3\u5219\u8868\u793a1\u30012\u8def\u540c\u65f6\u95ea<br>
	 * 0x0\u8868\u793a\u4e0d\u95ea\u706f<br>
	 * C type : unsigned char[(4)]
	 */
	public byte[] match_light = new byte[4];
	/** C type : config_point[4] */
	public config_point[] virtual_coil_polygon = new config_point[4];
	/** C type : char[40] */
	public byte[] resv = new byte[40];
	public config_vdetect() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("enable", "type", "flash", "motion", "diff", "detect_area", "virtual_coil", "night_threshold", "rsv2", "skip", "cut", "min_size", "max_size", "resize", "step", "debug", "draw_coil", "draw_area", "m", "match_light", "virtual_coil_polygon", "resv");
	}
	public static class ByReference extends config_vdetect implements Structure.ByReference {
		
	};
	public static class ByValue extends config_vdetect implements Structure.ByValue {
		
	};
}
